// This file contains the Protobuf definitions for the 'swap' canister
// which can be used for an initial token swap (swap/auction) to
// decentralise an application running on the IC, turning it into a
// dapp.

syntax = "proto3";

package ic_sns_swap.pb.v1;

// The initialisation data of the canister. Always specified on
// canister creation, and cannot be modified afterwards.
//
// If the initialization parameters are incorrect, the swap will
// immediately become aborted.
message Init {
  // The canister ID of the NNS governance canister. This is the only
  // principal that can open the swap.
  string nns_governance_canister_id = 1;

  // The canister ID of the governance canister of the SNS that this
  // token swap pertains to.
  string sns_governance_canister_id = 2;

  // The ledger canister of the SNS.
  string sns_ledger_canister_id = 3;

  // The ledger canister for the base token, typically ICP. The base
  // token is typically ICP, but this assumption is not used anywhere,
  // so, in principle, any token type can be used as base token.
  string icp_ledger_canister_id = 4;

  // The number of ICP that is "targetted" by this token swap. If this
  // amount is achieved, the swap can be triggered immediately,
  // without waiting for the due date (end_timestamp_seconds). Must be
  // at least `min_participants * min_participant_icp_e8s`.
  uint64 max_icp_e8s = 5;

  // The minimum number of buyers that must participate for the swap
  // to take place. Must be greater than zero.
  uint32 min_participants = 7;

  // The minimum amount of ICP that each buyer must contribute to
  // participate. Must be greater than zero.
  uint64 min_participant_icp_e8s = 8;

  // The maximum amount of ICP that each buyer can contribute. Must be
  // greater than or equal to `min_participant_icp_e8s` and less than
  // or equal to `max_icp_e8s`. Can effectively be disabled by
  // setting it to `max_icp_e8s`.
  uint64 max_participant_icp_e8s = 9;

  // The total number of ICP that is required for this token swap to
  // take place. This number divided by the number of SNS tokens being
  // offered gives the seller's reserve price for the swap, i.e., the
  // minimum number of ICP per SNS tokens that the seller of SNS
  // tokens is willing to accept. If this amount is not achieved, the
  // swap will be aborted (instead of committed) when the due date/time
  // occurs. Must be smaller than or equal to `max_icp_e8s`.
  uint64 min_icp_e8s = 10;

  // If the swap is aborted, control of the canister(s) should be set to these
  // principal(s). Must not be empty.
  repeated string fallback_controller_principal_ids = 11;
}

message BuyerState {
  // Can only be set when a buyer state record for a new buyer is
  // created, which can only happen when the lifecycle state is
  // `Open`. Must be at least `init.min_participant_icp_e8s` on
  // initialization. Can never be more than
  // `init.max_participant_icp_e8s`. Will be set to zero once the
  // tokens have been transferred out - either to the governance
  // canister when the swap is committed or (back) to the buyer when
  // the swap is aborted.
  //
  // Invariant between canisters:
  //
  //  ```text
  //  amount_icp_e8 <= icp_ledger.balance_of(subaccount(swap_canister, P)),
  //  ```
  //
  // where `P` is the principal ID associated with this buyer's state.
  //
  // ownership
  // * pending - a `BuyerState` cannot exists
  // * open - owned by the buyer, cannot be transferred out
  // * committed - owned by the SNS governance canister, can be transferred out
  // * aborted - owned by the buyer, can be transferred out
  uint64 amount_icp_e8s = 1;

  // Computed when world lifecycle changes to Committed.
  //
  // ownership:
  // * pending - a `BuyerState` cannot exists
  // * open - must be zero
  // * committed - owned by the buyer, can be transferred out
  // * aborted - must be zero
  uint64 amount_sns_e8s = 2;

  // Only used in state Committed or Aborted: ICP tokens are being
  // transferred either to the governance canister when the swap is
  // committed or to the buyer when the swap is aborted.
  bool icp_disbursing = 3;

  // Only used in state Committed, when a transfer of
  // `amount_sns_e8s` is in progress.
  bool sns_disbursing = 4;
}

// Lifecycle states of the swap cansiter's world state. The details of
// their meanings is provided in the documentation of the `Swap`.
enum Lifecycle {
  // Canister is incorrectly configured. Not a real lifecycle state.
  LIFECYCLE_UNSPECIFIED = 0;
  // The canister is correctly initialized and waiting for ALL of the
  // following conditions to be met in order to transition to OPEN:
  //   1. Funded. More precisely, this means that
  //     a. SNS tokens have been sent to the canister, and
  //     b. The refresh_sns_tokens Candid method has been called
  //        (to notify that the funds have been sent).
  //   2. The current time is not before start_timestamp_seconds, which is set
  //      via the set_open_time_window Candid method.
  LIFECYCLE_PENDING     = 1;
  // Users can register for the token swap.
  LIFECYCLE_OPEN        = 2;
  // The token price has been determined and buyers can collect
  // their tokens.
  LIFECYCLE_COMMITTED   = 3;
  // The token swap has been aborted.
  LIFECYCLE_ABORTED     = 4;
}

// Mutable state of the swap canister.
message State {
  // The number of tokens (of `init.sns_ledger_canister_id`) that are
  // being offered. The tokens are held in escrow for the the Governance
  // canister.
  //
  // Invariant:
  // ```text
  // state.sns_token_e8s <= token_ledger.balance_of(<swap-canister>)
  // ```
  //
  // When the swap is committed or aborted, this value is set to
  // zero. Any remaining balance, either due to fractions or due to an
  // aborted swap can be reclaimed by the Governance canister.
  uint64 sns_token_e8s = 1;
  // Invariant:
  // ```text
  // state.buyer_total_icp_e8s <= init.max_icp_e8s
  // ```
  map<string, BuyerState> buyers = 2;
  // The current lifecycle state of the swap.
  Lifecycle lifecycle = 3;

  // Initially, empty. Later, set by the set_open_time_window Candid method,
  // while the canister is in the Pending state. This eventually allows the
  // canister to enter the Open state.
  TimeWindow open_time_window = 4;
}

message TimeWindow {
  uint64 start_timestamp_seconds = 1;
  uint64 end_timestamp_seconds = 2;
}

// The complete state of the swap canister.
message Swap {
  Init init = 1;
  State state = 2;
}


//
// === Request/Response Messages
//


message GetCanisterStatusRequest {
}

// TODO: introduce a limits on the number of buyers to include?
message GetStateRequest {}
message GetStateResponse {
  Swap swap = 1;
  DerivedState derived = 2;
}

message DerivedState {
  uint64 buyer_total_icp_e8s = 1;
  // Current approximate rate SNS tokens per ICP.
  float sns_tokens_per_icp = 2;
}

// See `set_open_time_window` for details.
message SetOpenTimeWindowRequest {
  // Duration must be between 1 and 90 days. The TimeWindow's
  // end time but be greater than or equal to the TimeWindow's
  // start time.
  TimeWindow open_time_window = 1;
}
// Response if setting the open time window succeeded.
message SetOpenTimeWindowResponse {}


// Informs the swap canister that the swap has been funded. That is, the initial
// pot of tokens being offered has been transferred to the swap canister.
//
// Only in lifecycle state 'pending'.
message RefreshSnsTokensRequest {}
message RefreshSnsTokensResponse {}

// Informs the swap canister that a buyer has sent funds to participate in the
// swap.
//
// Only in lifecycle state 'open'.
message RefreshBuyerTokensRequest {
  // If not specified, the caller is used.
  string buyer = 1;
}
message RefreshBuyerTokensResponse {}

// Once a swap is committed or aborted, the tokens need to be
// distributed, and, if the swap was committed, neurons created.
message FinalizeSwapRequest {}

message FinalizeSwapResponse {
  SweepResult sweep_icp = 1;
  SweepResult sweep_sns = 2;
  SweepResult create_neuron = 3;
  SetModeCallResult sns_governance_normal_mode_enabled = 4;
}

message SweepResult {
  uint32 success = 1;
  uint32 failure = 2;
  uint32 skipped = 3;
}

// Analogous to Rust type Result<SetModeResponse, CanisterCallError>.
message SetModeCallResult {
  reserved "ok";
  reserved 1;
  oneof possibility {
    // TODO ic_sns_governance.pb.v1.SetModeResponse ok = 1;
    CanisterCallError err = 2;
  }
}

message CanisterCallError {
  optional int32 code = 1;
  string description = 2;
}

// Request a refund of tokens that were sent to the canister in
// error. The refund is always on the ICP ledger, from this canister's
// subaccount of the caller to the account of the caller.
message ErrorRefundIcpRequest {
  // The amount of ICP to transfer.
  uint64 icp_e8s = 1;
  // If specified, use this as 'fee' instead of the default.
  uint64 fee_override_e8s = 2;
}

message ErrorRefundIcpResponse {
}
