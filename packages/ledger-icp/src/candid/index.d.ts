/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.0-beta.6.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { ActorMethod } from "@icp-sdk/core/agent";
import type { IDL } from "@icp-sdk/core/candid";
import type { Principal } from "@icp-sdk/core/principal";

export interface Account {
  owner: Principal;
  subaccount: [] | [Uint8Array | number[]];
}
export interface GetAccountIdentifierTransactionsArgs {
  max_results: bigint;
  start: [] | [bigint];
  account_identifier: string;
}
export interface GetAccountIdentifierTransactionsError {
  message: string;
}
export interface GetAccountIdentifierTransactionsResponse {
  balance: bigint;
  transactions: Array<TransactionWithId>;
  oldest_tx_id: [] | [bigint];
}
export type GetAccountIdentifierTransactionsResult =
  | {
      Ok: GetAccountIdentifierTransactionsResponse;
    }
  | { Err: GetAccountIdentifierTransactionsError };
export interface GetAccountTransactionsArgs {
  /**
   * Maximum number of transactions to fetch.
   */
  max_results: bigint;
  /**
   * The txid of the last transaction seen by the client.
   * If None then the results will start from the most recent
   * txid. If set then the results will start from the next
   * most recent txid after start (start won't be included).
   */
  start: [] | [bigint];
  account: Account;
}
export interface GetBlocksRequest {
  start: bigint;
  length: bigint;
}
export interface GetBlocksResponse {
  blocks: Array<Uint8Array | number[]>;
  chain_length: bigint;
}
export interface HttpRequest {
  url: string;
  method: string;
  body: Uint8Array | number[];
  headers: Array<[string, string]>;
}
export interface HttpResponse {
  body: Uint8Array | number[];
  headers: Array<[string, string]>;
  status_code: number;
}
export interface InitArg {
  ledger_id: Principal;
}
export type Operation =
  | {
      Approve: {
        fee: Tokens;
        from: string;
        allowance: Tokens;
        expected_allowance: [] | [Tokens];
        expires_at: [] | [TimeStamp];
        spender: string;
      };
    }
  | {
      Burn: { from: string; amount: Tokens; spender: [] | [string] };
    }
  | { Mint: { to: string; amount: Tokens } }
  | {
      Transfer: {
        to: string;
        fee: Tokens;
        from: string;
        amount: Tokens;
        spender: [] | [string];
      };
    };
export interface Status {
  num_blocks_synced: bigint;
}
export interface TimeStamp {
  timestamp_nanos: bigint;
}
export interface Tokens {
  e8s: bigint;
}
export interface Transaction {
  memo: bigint;
  icrc1_memo: [] | [Uint8Array | number[]];
  operation: Operation;
  timestamp: [] | [TimeStamp];
  created_at_time: [] | [TimeStamp];
}
export interface TransactionWithId {
  id: bigint;
  transaction: Transaction;
}
export interface _SERVICE {
  get_account_identifier_balance: ActorMethod<[string], bigint>;
  get_account_identifier_transactions: ActorMethod<
    [GetAccountIdentifierTransactionsArgs],
    GetAccountIdentifierTransactionsResult
  >;
  get_account_transactions: ActorMethod<
    [GetAccountTransactionsArgs],
    GetAccountIdentifierTransactionsResult
  >;
  get_blocks: ActorMethod<[GetBlocksRequest], GetBlocksResponse>;
  http_request: ActorMethod<[HttpRequest], HttpResponse>;
  icrc1_balance_of: ActorMethod<[Account], bigint>;
  ledger_id: ActorMethod<[], Principal>;
  status: ActorMethod<[], Status>;
}
export declare const idlService: IDL.ServiceClass;
export declare const idlInitArgs: IDL.Type[];
export declare const idlFactory: IDL.InterfaceFactory;
export declare const init: (args: { IDL: typeof IDL }) => IDL.Type[];
