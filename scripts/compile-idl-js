#!/usr/bin/env bash

# Compiles candid .did files to .idl.js and .d.ts

set -euo pipefail

if [ "$(didc --version)" != "didc 0.1.4" ]; then
  {
    echo "didc version 0.1.4 is required. To install it on Mac:"
    echo "curl -Lf https://github.com/dfinity/candid/releases/download/2022-08-09/didc-macos -o install_didc"
    echo "install -m 755 install_didc /$HOME/.local/bin/didc"
  } >&2
  exit 1
fi

did_files_to_compile_for_pkg() {
  local pkg="$1"
  local path=packages/${pkg}/candid

  find ${path} -type f -name '*.did' |
    grep -vE ${path}/+payloads.did
}

did_files_to_compile() {
  did_files_to_compile_for_pkg "nns"
  did_files_to_compile_for_pkg "sns"
  did_files_to_compile_for_pkg "cmc"
  did_files_to_compile_for_pkg "ledger"
  did_files_to_compile_for_pkg "ledger-icrc"
  did_files_to_compile_for_pkg "ledger-icp"
  did_files_to_compile_for_pkg "ckbtc"
  did_files_to_compile_for_pkg "ic-management"
}

# Normal API access.
compile_did() {
  local didfile="$1"
  local jsFactoryFile="$(echo "$didfile" | sed 's/did$/idl.js/g')"
  local tsFactoryFile="$(echo "$didfile" | sed 's/did$/idl.d.ts/g')"
  local tsfile="$(echo "$didfile" | sed 's/did$/d.ts/g')"

  {
    echo "/* Do not edit.  Compiled with ./scripts/compile-idl-js from ${didfile} */"
    didc bind -t js "${didfile}"
  } | sed -E "s/^export default/export const idlFactory =/g" >"${jsFactoryFile}"

  generate_did_factory_ts

  didc bind -t ts "${didfile}" >"${tsfile}"
}

# The certified API makes use of the fact that update calls are always signed, so it calls query calls as updates.
# Note: This is inefficient if query calls are already certified, which is often but not always the case.
# Note: It is not clear which API calls have certified responses or how to check that a query response has a certificate.
compile_certified_did() {
  local didfile="$1"
  local certified_didfile="$(mktemp)"
  local jsFactoryFile="$(echo "$didfile" | sed 's/did$/certified.idl.js/g')"
  local tsFactoryFile="$(echo "$didfile" | sed 's/did$/certified.idl.d.ts/g')"

  QUERY_ARG='query'
  sed "s/$QUERY_ARG//g" "$didfile" >"$certified_didfile"

  {
    echo "/* Do not edit.  Compiled with ./scripts/compile-idl-js from ${didfile} */"
    didc bind -t js "${certified_didfile}"
  } | sed "s/^export default/export const idlFactory =/g" >"${jsFactoryFile}"

  generate_did_factory_ts

  rm "$certified_didfile"
}

generate_did_factory_ts() {
  echo "import type { IDL } from \"@dfinity/candid\";export const idlFactory: IDL.InterfaceFactory;" >"${tsFactoryFile}"
}

# First generate default certified versions of normal did files.
# Where there are custom certified did files the normal compilation will override the default.
did_files_to_compile | grep -v certified | while read line; do
  compile_certified_did "$line"
done

did_files_to_compile | while read line; do
  compile_did "$line"
done

# didc might generate definition file with invalid trailing comma which can be fixed by the code formatter
# in addition, types we create with generate_did_factory_ts are not formatted
npm run format
