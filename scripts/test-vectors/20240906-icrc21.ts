import { Cbor } from "@dfinity/agent";
import { Principal } from "@dfinity/principal";
import { defaultCaller, writeToJson } from "./utils";

const consentMessageCertificate

function hexStringToArrayBuffer(hexString: string): ArrayBuffer {
  // Remove any non-hexadecimal characters (e.g., spaces)
  hexString = hexString.replace(/[^a-fA-F0-9]/g, "");

  // Ensure the string has an even length
  if (hexString.length % 2 !== 0) {
    throw new Error("Invalid hex string");
  }

  // Create an ArrayBuffer with the appropriate length
  var arrayBuffer = new ArrayBuffer(hexString.length / 2);
  var uint8Array = new Uint8Array(arrayBuffer);

  // Convert each pair of hex characters to a byte
  for (var i = 0; i < hexString.length; i += 2) {
    uint8Array[i / 2] = parseInt(hexString.substr(i, 2), 16);
  }

  return arrayBuffer;
}

const callRequest = {
  arg: hexStringToArrayBuffer("4449444C066E7D6D7B6E016E786C02B3B0DAC30368AD86CA8305026C08C6FCB60200BA89E5C20402A2DE94EB060282F3F3910C03D8A38CA80D7D919C9CBF0D00DEA7F7DA0D03CB96DCB40E040105000000008094EF3A0001004CA1201281F617011D4E9644473EFFB4CD436EEC1A9C8C08168021F63879C97D1F6FDC89DD0200"),
  canister_id: Principal.fromHex("00000000023000060101"),
  ingress_expiry: BigInt("1725626939615000000"),
  method_name: "icrc2_approve",
  request_type: "call",
  sender: defaultCaller,
  nonce: hexStringToArrayBuffer("907C228E7F85CBE63366D8B32A710DA6")
};

const consentMessageRequest = {
  arg: hexStringToArrayBuffer(
    "4449444C086D7B6E766C02AEAEB1CC0501D880C6D007716C02CBAEB581017AB183E7F1077A6B028BEABFC2067F8EF1C1EE0D036E046C02EFCEE7800402C4FBF2DB05056C03D6FCA70200E1EDEB4A7184F7FEE80A06010780014449444C066E7D6D7B6E016E786C02B3B0DAC30368AD86CA8305026C08C6FCB60200BA89E5C20402A2DE94EB060282F3F3910C03D8A38CA80D7D919C9CBF0D00DEA7F7DA0D03CB96DCB40E040105000000008094EF3A0001004CA1201281F617011D4E9644473EFFB4CD436EEC1A9C8C08168021F63879C97D1F6FDC89DD02000D69637263325F617070726F7665013C0002656E010112000300",
  ),
  canister_id: Principal.fromHex("00000000023000060101"),
  ingress_expiry: BigInt("1725626839615000000"),
  method_name: "icrc21_canister_call_consent_message",
  nonce: hexStringToArrayBuffer("2FFBD7295F2EF09C4DA2198A6B30F817"),
  request_type: "call",
  sender: Principal.fromHex("04"),
};

const createCandidBlobs = () => {
  const callRequestBlob = Buffer.from(
    Cbor.encode({ content: callRequest }),
  ).toString("hex");
  const consentMessageRequestBlob = Buffer.from(
    Cbor.encode({ content: consentMessageRequest }),
  ).toString("hex");

  writeToJson({
    data: { callRequestBlob, consentMessageRequestBlob, consentMessageCertificate },
    fileName: "icrc21-icrc2_approve.json",
  });
};

createCandidBlobs();
